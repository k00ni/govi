#!/usr/bin/env php
<?php

declare(strict_types=1);

use App\IndexEntry;
use EasyRdf\Format;

use function App\isEmpty;
use function App\loadQuadsIntoInMemoryStore;
use function App\sendCachedRequest;

/**
 * Read ontology information from BioPortals API:
 *
 * https://data.bioontology.org/documentation
 * https://data.bioontology.org/ontologies?include=all&display_context=false&display_links=true&apikey=XXX
 */

require 'bootstrap.php';

// time limit for script
\set_time_limit(3600);

echo 'Read ontologies list';

if (false === file_exists($bioPortalApiKeyFile)) {
    echo PHP_EOL;
    echo PHP_EOL;
    echo 'No API key file found. Please rename '.$bioPortalApiKeyFile.' and insert your personal API key';
    echo PHP_EOL;
    return;
}

$apiKey = require $bioPortalApiKeyFile;

$temporaryIndex = [];

// ontology list
$url = 'https://data.bioontology.org/ontologies?include=all&display_context=false&display_links=true&apikey=';
$url .= $apiKey;

$content = sendCachedRequest($url);
$ontologies = json_decode($content, true);

echo PHP_EOL.'loaded '.count($ontologies).' entries'.PHP_EOL;

foreach ($ontologies as $ontology) {
    $newEntry = new IndexEntry('BioPortal', 'https://data.bioontology.org/documentation');

    // title
    $newEntry->setOntologyTitle($ontology['name']);
    echo PHP_EOL;
    echo PHP_EOL;
    echo $newEntry->getOntologyTitle();

    // URI
    // example: https://github.com/ncbo/ontologies_api/issues/138#issuecomment-2035077045
    $url = $ontology['links']['latest_submission'].'?include=all&display_context=false&display_links=false&apikey=';
    $url .= $apiKey;
    $content = sendCachedRequest($url);
    $arr = json_decode($content, true);
    if (isEmpty($arr['uri'] ?? null)) {
        echo PHP_EOL.' - IGNORED because no URI found'.PHP_EOL;
        continue;
    } else {
        $newEntry->setOntologyIri($arr['uri']);
    }

    // get related RDF data
    $uiContent = sendCachedRequest($ontology['links']['ui']);
    $regex = "/href='(https:\/\/data\.bioontology\.org\/ontologies\/[a-zA-Z\-_]+\/download)\?apikey=.*?&(download_format=rdf)/smi";
    preg_match($regex, $uiContent, $match);
    if (isset($match[1]) && isset($match[2])) {
        $ontologyFile = $match[1].'?'.$match[2];
        $ontologyFileWithApiKey = $ontologyFile .'&apikey='.$apiKey;
        $format = 'rdfxml';
        echo PHP_EOL.' - use ui link';
    } else {
        // try download link
        $ontologyFile = $ontology['links']['download'];
        $ontologyFileWithApiKey = $ontologyFile.'?apikey='.$apiKey;
        $content = sendCachedRequest($ontologyFileWithApiKey);
        $format = Format::guessFormat($content)?->getName() ?? null;

        if (null == $format) {
            echo PHP_EOL.' - unknown format';
            continue;
        } else {
            echo PHP_EOL.' - use download link';
        }
    }

    if ('ntriples' == $format) {
        $newEntry->setLatestNtFile($ontologyFile);
    } elseif ('rdfxml' == $format) {
        $newEntry->setLatestRdfXmlFile($ontologyFile);
    } elseif ('turtle' == $format) {
        $newEntry->setLatestTtlFile($ontologyFile);
    } else {
        echo PHP_EOL.' - IGNORED: No valid RDF notation found ('. $format.') for '.$ontologyFile;
        continue;
    }

    $temporaryIndex[] = $newEntry;

    usleep(500);
}

echo PHP_EOL.'done, '.count($temporaryIndex).' entries processed (TODO move to stats)';

echo PHP_EOL;
echo PHP_EOL;
